%return int
%include <iostream>

# Ignore line comments
%ignore "//[^\n]*\n?"
# Ignore block comments
# This regex is finicky to get right
%ignore "/\*((?!\*/)(.|\n))*?\*/"


# Declare our tokens
INT = "[0-9]+";
PLUS = "\+";
MINUS = "-";
STAR = "\*";
SLASH = "/";
OPEN_PAREN = "\(";
CLOSE_PAREN = "\)";

# This is the starting rule, it is usually best to only have one possible
# way to produce your starting rule
output = expr { return $0; };

expr
    = expr PLUS term
    {
        int out = $0 + $2;
        std::cout << ">> " << $0 << " + " << $2 << " = " << out <<"\n";
        return out;
    }
    | expr MINUS term
    {
        int out = $0 - $2;
        std::cout << ">> " << $0 << " - " << $2 << " = " << out << "\n";
        return out;
    }
    | term { return $0; }
    ;

term
    = term STAR factor
    {
        int out = $0 * $2;
        std::cout << ">> " << $0 << " * " << $2 << " = " << out << "\n";
        return out;
    }
    | term SLASH factor
    {
        int out = $0 / $2;
        std::cout << ">> " << $0 << " / " << $2 << " = " << out << "\n";
        return out;
    }
    | factor { return $0; }
    ;

factor
    = INT { return std::stoi($0); }
    | OPEN_PAREN expr CLOSE_PAREN { return $1; }
    ;
